<?php

namespace Tests\Infrastructure\Doctrine\Persistence\Repository;

use Blog\Domain\Contracts\CommentRepositoryInterface;
use Blog\Domain\Factory\ArticleFactory;
use Blog\Domain\Factory\CommentFactory;
use Blog\Domain\ValueObject\ArticleId;
use Blog\Domain\ValueObject\CommentId;
use Blog\Domain\ValueObject\Email;
use Blog\Infrastructure\Persistence\Doctrine\Repository\ArticleRepository;
use Blog\Infrastructure\Persistence\Doctrine\Repository\CommentRepository;

class CommentRepositoryTest extends AbstractRepositoryTest
{
    protected function createRepository(): CommentRepositoryInterface
    {
        return new CommentRepository($this->connection);
    }

    /**
     * @test
     */
    public function it_should_be_save_an_comment(): void
    {
        $article = ArticleFactory::create(ArticleId::generate(), $this->faker->unique()->domainWord(), $this->faker->text());
        (new ArticleRepository($this->connection))->save($article);
        $comment = CommentFactory::create(CommentId::generate(), $article->getId(), $this->faker->text(5), Email::fromString($this->faker->email()));

        $this->repository->save($comment);

        $comments =  $this->repository->getAll($article->getId());

        $this->assertTrue(true);
        $this->assertCount(1, $comments);

        $commentWasCreated =  array_filter($comments, function ($c) use ($comment) {
            return $comment->getId() == $c->getId() ;
        })[0];

        $this->assertSame($comment->getId()->toString(), $commentWasCreated->getId()->toString());
        $this->assertSame($comment->getArticle()->toString(), $article->getId()->toString());
        $this->assertSame($comment->getContent(), $commentWasCreated->getContent());
    }

    public function tearDown(): void
    {
        $this->connection->executeStatement('TRUNCATE TABLE comment CASCADE');

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
